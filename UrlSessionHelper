import Foundation

class URLSessionHelper {
    
    static let shared = URLSessionHelper()
    
    private init() {}
    
    enum HttpMethod: String {
        case get = "GET"
        case post = "POST"
        case put = "PUT"
        case delete = "DELETE"
    }
    
    enum APIError: Error {
        case invalidResponse
        case noData
        case failedRequest(String)
        case invalidStatusCode(Int)
    }
    
    typealias CompletionHandler = (Result<Data, Error>) -> Void
    
    private func request(_ url: URL, method: HttpMethod, parameters: [String: Any]? = nil, headers: [String: String]? = nil, completion: @escaping CompletionHandler) {
        
        var request = URLRequest(url: url)
        request.httpMethod = method.rawValue
        
        if let headers = headers {
            for (key, value) in headers {
                request.addValue(value, forHTTPHeaderField: key)
            }
        }
        
        if let parameters = parameters {
            do {
                request.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: [])
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            } catch {
                completion(.failure(error))
                return
            }
        }
        
        let session = URLSession.shared
        let task = session.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(APIError.failedRequest(error.localizedDescription)))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion(.failure(APIError.invalidResponse))
                return
            }
            
            guard (200...299).contains(httpResponse.statusCode) else {
                completion(.failure(APIError.invalidStatusCode(httpResponse.statusCode)))
                return
            }
            
            guard let data = data else {
                completion(.failure(APIError.noData))
                return
            }
            
            completion(.success(data))
        }
        task.resume()
    }
    
    func get(_ url: URL, headers: [String: String]? = nil, completion: @escaping CompletionHandler) {
        request(url, method: .get, headers: headers, completion: completion)
    }
    
    func post(_ url: URL, parameters: [String: Any], headers: [String: String]? = nil, completion: @escaping CompletionHandler) {
        request(url, method: .post, parameters: parameters, headers: headers, completion: completion)
    }
    
    func put(_ url: URL, parameters: [String: Any], headers: [String: String]? = nil, completion: @escaping CompletionHandler) {
        request(url, method: .put, parameters: parameters, headers: headers, completion: completion)
    }
    
    func delete(_ url: URL, headers: [String: String]? = nil, completion: @escaping CompletionHandler) {
        request(url, method: .delete, headers: headers, completion: completion)
    }
    
    func sendMultipartData(url: URL, data: Data, fileName: String, completion: @escaping CompletionHandler) {
        let boundary = "Boundary-\(UUID().uuidString)"
        var request = URLRequest(url: url)
        request.httpMethod = HttpMethod.post.rawValue
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        
        var body = Data()
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"file\"; filename=\"\(fileName)\"\r\n".data(using: .utf8)!)
        body.append("Content-Type: application/octet-stream\r\n\r\n".data(using: .utf8)!)
        body.append(data)
        body.append("\r\n--\(boundary)--\r\n".data(using: .utf8)!)
        request.httpBody = body
        
        let session = URLSession.shared
        let task = session.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(APIError.failedRequest(error.localizedDescription)))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion(.failure(APIError.invalidResponse))
                return
            }
            
            guard (200...299).contains(httpResponse.statusCode) else {
                completion(.failure(APIError.invalidStatusCode(httpResponse.statusCode)))
                return
            }
            
            guard let data = data else {
                completion(.failure(APIError.noData))
                return
            }
            
            completion(.success(data))
        }
        task.resume()
    }
}

import Foundation
import UIKit
import Photos
import WXImageCompress


extension AVCaptureDevice {
    enum AuthorizationStatus {
        case justDenied
        case alreadyDenied
        case restricted
        case justAuthorized
        case alreadyAuthorized
        case unknown
    }

    class func authorizeVideo(completion: ((AuthorizationStatus) -> Void)?) {
        AVCaptureDevice.authorize(mediaType: AVMediaType.video, completion: completion)
    }

    class func authorizeAudio(completion: ((AuthorizationStatus) -> Void)?) {
        AVCaptureDevice.authorize(mediaType: AVMediaType.audio, completion: completion)
    }

    private class func authorize(mediaType: AVMediaType, completion: ((AuthorizationStatus) -> Void)?) {
        let status = AVCaptureDevice.authorizationStatus(for: mediaType)
        switch status {
        case .authorized:
            completion?(.alreadyAuthorized)
        case .denied:
            completion?(.alreadyDenied)
        case .restricted:
            completion?(.restricted)
        case .notDetermined:
            AVCaptureDevice.requestAccess(for: mediaType, completionHandler: { (granted) in
                DispatchQueue.main.async {
                    if granted {
                        completion?(.justAuthorized)
                    } else {
                        completion?(.justDenied)
                    }
                }
            })
        @unknown default:
            completion?(.unknown)
        }
    }
}
enum pickType {
    case image
    case video
    case none
}

class ImagePickerManager: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    static let shared : ImagePickerManager = ImagePickerManager(type: .image)
    var picker = UIImagePickerController()
    var alert = UIAlertController(title: "Chose Image", message: nil, preferredStyle: .actionSheet)
    
    //alert.view.tintColor = UIColor.AppRed()
    
    var viewController: UIViewController = UIViewController()
    var pickImageCallback : ((UIImage , URL?) -> ())?;
    
    var type : pickType = .image
    
    init(type : pickType){
        super.init()
        
        self.type = type
        
        if self.type == .image {
            picker.mediaTypes = ["public.image"]
            alert = UIAlertController(title: "Chose Image", message: nil, preferredStyle: .actionSheet)
        }else {
            picker.mediaTypes = ["public.image"]
            picker.videoMaximumDuration = 100000
            
            alert = UIAlertController(title: "Chose Video", message: nil, preferredStyle: .actionSheet)
        }
        let cameraAction = UIAlertAction(title: "Camera", style: .default){
            UIAlertAction in
            self.openCamera()
        }
        let galleryAction = UIAlertAction(title: "Gallery", style: .default){
            UIAlertAction in
            self.openGallery()
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel){
            UIAlertAction in
        }
        
        // Add the actions
        picker.delegate = self
        alert.view.tintColor = UIColor.black
        alert.addAction(cameraAction)
        alert.addAction(galleryAction)
        alert.addAction(cancelAction)
    }
    
    func pickImage(_ viewController: UIViewController, _ callback: @escaping ((UIImage , URL?) -> ())) {
        pickImageCallback = callback;
        self.viewController = viewController;
        
        alert.popoverPresentationController?.sourceView = self.viewController.view
        
        viewController.present(alert, animated: true, completion: nil)
    }
    public func openCamera(){
        alert.dismiss(animated: true, completion: nil)
        if(UIImagePickerController .isSourceTypeAvailable(.camera)){
            self.picker.sourceType = .camera
            //self.picker.allowsEditing = false
            if(self.type == .video){
                self.picker.allowsEditing = true
            }else{
                self.picker.allowsEditing = false
            }
            //to stop parent viewcontroller dismiss
            viewController.definesPresentationContext = true
            picker.modalPresentationStyle = .overFullScreen
            self.viewController.present(self.picker, animated: true, completion: nil)
        } else {
            showAlertWithTitleFromVC(vc: self.viewController , title: "Warning", andMessage: "You don't have camera", buttons: ["Ok"]) { (tag) in
                print(tag)
            }
        }
    }
    public func openGallery(){
        alert.dismiss(animated: true, completion: nil)
        
        PHPhotoLibrary.requestAuthorization { [weak self] result in
            guard let self = self else { return }
            if result == .authorized {
                DispatchQueue.main.async {
                    self.picker.sourceType = .photoLibrary
                    if(self.type == .video){
                        self.picker.allowsEditing = true
                    }else{
                        self.picker.allowsEditing = false
                    }
                    
                    
                    self.viewController.present(self.picker, animated: true, completion: nil)
                }
            } else {
                DispatchQueue.main.async {
                    self.showPermisionAlert(type:"photo gallery")
                }
            }
        }
    }
    
    func showPermisionAlert(type:String) {
        
        alert = UIAlertController(title: Constant.APP_NAME, message: "Please allow your " + type, preferredStyle: .alert)
        let settingsAction = UIAlertAction(title: "Settings", style: .default) { (_) -> Void in
            
            guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else {
                return
            }
            
            if UIApplication.shared.canOpenURL(settingsUrl) {
                UIApplication.shared.open(settingsUrl, completionHandler: { (success) in
                    print("Settings opened: \(success)") // Prints true
                })
            }
        }
        
        alert.addAction(settingsAction)
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        self.viewController.present(alert, animated: true, completion: nil)
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
    //for swift below 4.2
    //func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
    //    picker.dismiss(animated: true, completion: nil)
    //    let image = info[UIImagePickerControllerOriginalImage] as! UIImage
    //    pickImageCallback?(image)
    //}
    
    // For Swift 4.2+
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true, completion: nil)

        if self.type == .image {
            var imgUrl : URL!
            if let url = info[.imageURL] as? URL  {
                imgUrl = url
            }
            if let image = info[.editedImage] as? UIImage {
                pickImageCallback?(image.wxCompress(), imgUrl)
            }else if let image = info[.originalImage] as? UIImage {
                pickImageCallback?(image.wxCompress(), imgUrl)
            }
        }else {
            let videoToCompress = info[UIImagePickerController.InfoKey.mediaURL] as? URL
            
//            if let url = videoToCompress , let img = url.generateThumbnail() {
//
//                pickImageCallback?(img, url)
//            }
        }
        
    }
    
    @objc func imagePickerController(_ picker: UIImagePickerController, pickedImage: UIImage?) {
    }
    
}

extension URL {
    func fileSizeInMB() -> String {
        let p = self.path
        
        let attr = try? FileManager.default.attributesOfItem(atPath: p)
        
        if let attr = attr {
            let fileSize = Float(attr[FileAttributeKey.size] as! UInt64) / (1024.0 * 1024.0)
            
            return String(format: "%.2f MB", fileSize)
        } else {
            return "Failed to get size"
        }
    }
}


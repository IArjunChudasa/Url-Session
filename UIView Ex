public extension UIView {
    @IBInspectable var shadowForTextFields: Bool {
        get {
            return layer.shadowOpacity > 0.0
        }
        set {
            if newValue == true {
                self.clipsToBounds = false
                //layer.cornerRadius = 17.0
                layer.shadowColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.04).cgColor
                layer.shadowOpacity = 1
                layer.shadowRadius = 10
                layer.shadowOffset = CGSize(width: 0, height: 3)
            }
        }
    }
    
    //MARK: - IBInspectable
    
    //Set Corner Radious
    @IBInspectable var shadow: Bool {
        get {
            return layer.shadowOpacity > 0.0
        }
        set {
            if newValue == true {
                self.addShadowmy()
            }
        }
    }
    @IBInspectable var SmallShadow: Bool {
        get {
            return layer.shadowOpacity > 0.0
        }
        set {
            if newValue == true {
                self.addShadowSmall()
            }
        }
    }
    
//    @IBInspectable var appCardsShadow: Bool {
//        get {
//            return layer.shadowOpacity > 0.0
//        }
//        set {
//            if newValue == true {
//                self.addShadow(offset: CGSize(width: 0, height: 8), opacity: 1.0, radius: 8.5, color: UIColor(red: 0, green: 0, blue: 0, alpha: 0.3))
//            }
//        }
//    }

    @IBInspectable var AppColorShadow: Bool {
        get {
            return layer.shadowOpacity > 0.0
        }
        set {
            if newValue == true {
                self.colorShadow()
            }
        }
    }
    
    @IBInspectable var siteManageCardShadow: Bool {
        get {
            return layer.shadowOpacity > 0.0
        }
        set {
            if newValue == true {
                self.addShadowmy(shadowColor: UIColor(red: 0.758, green: 0.758, blue: 0.758, alpha: 0.25).cgColor, shadowOffset: CGSize(width: 0, height: 4), shadowOpacity: 1.0, shadowRadius: 10.0)
            }
        }
    }

    func add_shadow(demoView : UIView,height : CGFloat){
        
        let radius: CGFloat = demoView.frame.width //change it to .height if you need spread for height
        let shadowPath = UIBezierPath(rect: CGRect(x: -1, y: -1, width: radius + 0.5 , height:height - 4.0))
        //Change 2.1 to amount of spread you need and for height replace the code for height
        
        demoView.layer.cornerRadius = cornerRadius
        demoView.layer.shadowColor = UIColor.lightText.withAlphaComponent(0.9).cgColor
        demoView.layer.shadowOffset = CGSize(width: 0.1, height: 0.1)  //Here you control x and y
        demoView.layer.shadowOpacity = 0.2
        demoView.layer.shadowRadius = cornerRadius //Here your control your blur
        demoView.layer.masksToBounds =  false
        demoView.layer.shadowPath = shadowPath.cgPath
    }
    
    func addShadowmy(shadowColor: CGColor = UIColor.lightGray.withAlphaComponent(0.9).cgColor,
                   shadowOffset: CGSize = CGSize.zero,
                   shadowOpacity: Float = 0.5,
                   shadowRadius: CGFloat = 5.0) {
        
        layer.shadowColor = shadowColor
        layer.shadowOffset = shadowOffset
        layer.shadowOpacity = shadowOpacity
        layer.shadowRadius = cornerRadius
        
        
    }
    
    func colorShadow(shadowOffset: CGSize = CGSize.zero,
                     shadowOpacity: Float = 1.0,
                     shadowRadius: CGFloat = 1.5) {
//        self.dropShadow()
        layer.shadowColor =   UIColor.init(red: 32/255, green: 232/255, blue: 126/255, alpha: 0.8).cgColor
        layer.shadowOffset = shadowOffset
        layer.shadowOpacity = shadowOpacity
        layer.shadowRadius = cornerRadius
        layer.position = center
        layer.shadowOffset = CGSize(width:1, height: 0.0)  //Here you control x and y
        layer.shadowOpacity = shadowOpacity
        layer.shadowRadius = cornerRadius //Here your control your blur
        layer.masksToBounds =  false
    }
    //CGSize(width: 1.0, height: 1.0)
    func addShadowSmall(shadowColor: CGColor = UIColor.lightGray.cgColor,
                        shadowOffset: CGSize = CGSize(width: 1.0, height: 1.0),
                        shadowOpacity: Float = 0.2,
                        shadowRadius: CGFloat = 1) {
        
        layer.shadowColor = shadowColor
        layer.shadowOffset = shadowOffset
        layer.shadowOpacity = shadowOpacity
        layer.shadowRadius = cornerRadius
    }
    
    @IBInspectable var cornerRadius:CGFloat {
        set {
            self.layer.cornerRadius = newValue
        }
        get {
            return self.layer.cornerRadius
        }
    }
    
    
    func roundCorners(corners:UIRectCorner, radius: CGFloat) {
        let path = UIBezierPath(roundedRect: self.bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))
        let mask = CAShapeLayer()
        mask.path = path.cgPath
        self.layer.mask = mask
    }
    
    
    //Set Round
    @IBInspectable var Round:Bool {
        set {
            self.layer.cornerRadius = self.frame.size.height / 2.0
        }
        get {
            return self.layer.cornerRadius == self.frame.size.height / 2.0
        }
    }
    //Set Border Color
    @IBInspectable var borderColor:UIColor {
        set {
            self.layer.borderColor = newValue.cgColor
        }
        get {
            return UIColor(cgColor: self.layer.borderColor!)
        }
    }
    //Set Border Width
    @IBInspectable var borderWidth:CGFloat {
        set {
            self.layer.borderWidth = newValue
        }
        get {
            return self.layer.borderWidth
        }
    }
    
    //Set Shadow in View
    func addShadowView(width:CGFloat=0.2, height:CGFloat=0.2, Opacidade:Float=0.7, maskToBounds:Bool=false, radius:CGFloat=0.5){
        self.layer.shadowColor = UIColor.black.cgColor
        self.layer.shadowOffset = CGSize(width: width, height: height)
        self.layer.shadowRadius = radius
        self.layer.shadowOpacity = Opacidade
        self.layer.masksToBounds = maskToBounds
    }
    
//    struct NLInnerShadowDirection: OptionSet {
//        let rawValue: Int
//
//        static let None = NLInnerShadowDirection(rawValue: 0)
//        static let Left = NLInnerShadowDirection(rawValue: 1 << 0)
//        static let Right = NLInnerShadowDirection(rawValue: 1 << 1)
//        static let Top = NLInnerShadowDirection(rawValue: 1 << 2)
//        static let Bottom = NLInnerShadowDirection(rawValue: 1 << 3)
//        static let All = NLInnerShadowDirection(rawValue: 15)
//    }
    
    func dropShadow() {
        
        self.layer.masksToBounds = false
        self.layer.shadowColor = UIColor.init(red: 32/255, green: 232/255, blue: 126/255, alpha: 0.5).cgColor
        self.layer.shadowOpacity = 0.7
        self.layer.shadowOffset = CGSize(width: 1, height: -1)//CGSize.zero//CGSize(width: -1, height: 1)
        self.layer.shadowRadius = 2
        self.layer.shadowPath = UIBezierPath(rect: self.bounds).cgPath
        self.layer.shouldRasterize = true
        
        self.layer.rasterizationScale = UIScreen.main.scale
        
    }
    func removeInnerShadow() {
        for view in self.subviews {
            if (view.tag == 2639) {
                view.removeFromSuperview()
                break
            }
        }
    }
    
    
    
    func fadeIn(duration: TimeInterval = 0.2, delay: TimeInterval = 0.2, completion: @escaping ((Bool) -> Void) = {(finished: Bool) -> Void in}) {
        UIView.animate(withDuration: duration, delay: delay, options: .curveEaseIn, animations: {
            self.alpha = 1.0
        }, completion: completion)
    }
    
    func fadeOut(duration: TimeInterval = 0.2, delay: TimeInterval = 0.2, completion: @escaping (Bool) -> Void = {(finished: Bool) -> Void in}) {
        UIView.animate(withDuration: duration, delay: delay, options: .curveEaseIn, animations: {
            self.alpha = 0.0
        }, completion: completion)
    }
    /// SwifterSwift: Shake directions of a view.
    ///
    /// - horizontal: Shake left and right.
    /// - vertical: Shake up and down.
    enum ShakeDirection {
        /// SwifterSwift: Shake left and right.
        case horizontal

        /// SwifterSwift: Shake up and down.
        case vertical
    }

    /// SwifterSwift: Angle units.
    ///
    /// - degrees: degrees.
    /// - radians: radians.
    enum AngleUnit {
        /// SwifterSwift: degrees.
        case degrees

        /// SwifterSwift: radians.
        case radians
    }

    /// SwifterSwift: Shake animations types.
    ///
    /// - linear: linear animation.
    /// - easeIn: easeIn animation.
    /// - easeOut: easeOut animation.
    /// - easeInOut: easeInOut animation.
    enum ShakeAnimationType {
        /// SwifterSwift: linear animation.
        case linear

        /// SwifterSwift: easeIn animation.
        case easeIn

        /// SwifterSwift: easeOut animation.
        case easeOut

        /// SwifterSwift: easeInOut animation.
        case easeInOut
    }
}
